Fonts: how to define the glyph's table
-----------------------------------------

Using Font-Creator:

- Open the font

- Check the transformation window (menu > view > toolbars > transformation)

- Select the glyph (double click on it). This wil open a window with the glyph enlarged and a auxiliary window with measurements.

- Click on the glyph to select a shape (or more) so that the glyph outline is selected

- Select tabs 'position' and 'size' and take note of the values.




// Definition of an entry of the Glyphs table
struct lmGlyph
{
    // all measurements in tenths
    wxChar      GlyphChar;
    int         GlyphOffset;
    int         SelRectShift;
    int         SelRectHeight;
    int         Top;
    int         Bottom;
    lmTenths    thxPos;
    lmTenths    thyPos;
    lmTenths    thWidth;
    lmTenths    thHeight;
    lmTenths    txDrag;
    lmTenths    tyDrag;

    lmGlyph(const wxChar glyph, int yOffset, int yShift, int selHeight, int top, int bottom, 
            int xPos, int yPos, int width, int height, int xDrag, int yDrag);

};

offset:     the y-axis offset from paper cursor position so that shape is correctly
            positioned on a five-lines staff (units: tenths)

Sel rectangle
    shift:   the y-axis offset from bitmap rectangle to the selection rectangle origin
             (units: tenths)
             - not used
             
    height:  the height of the selection rectangle
             units: tenths (tenths of inter-line space)
             - not used
             
Top         - Only used in flags, to position them
Bottom      - Only used in flags, to position them

Position    (in FUnits). Just the values displayed in window 'transformation', tab 'position',
            when the glyph outline is selected
    x       - not used
    y       - not used

Only used in TimeSignature, to space the numbers
Size        (in FUnits). Just the values displayed in window 'transformation', tab 'size',
            when the glyph outline is selected
    width   - Only used in TimeSignature, to space the numbers
    height  - not used


size (width, height) are now computed by AGG Drawer, methods FtGetGlyphBounds() and FtGetGlyphBoundsInPixels(). But it is still needed for lmScoreCanvas::PrepareDragImages()

sel rectangle (shift, height) data should be 0, meaning 'use rectangle bounding full glyph'. Otherwise, data must be in tenths


drag point
    It is used only in those glyphs used to create drag images for mouse data entry. It is the position of the drag image point, relative to glyph bounding rectangle top left corner.
    
    +--------+...-
    |        |
    |        |   y
    |  +.....|...-
    |  .     |
    |  .     |   
    |  .     |     
    |  .     |
    +--------+
    .  .
    |x |
    
    
    x = width / 2
    
    stem up
        y = height - 248  for notes with stem (248 = half notehead)
        y = height / 2    for notes with only notehead

    stem down
        y = 248           (half notehead, for notes with stem)
        y = height / 2    (half notehead, for notes with only notehead
        

Image drag issues
---------------------

Take into account that:

    1. For dragging a mouse tool image the involved methods are lmShapeStaff::OnMouseStartMoving(), lmShapeStaff::OnMouseMoving() and lmShapeStaff::OnMouseEndMoving(). They receive the mouse position and must return the valid position.for the cursor hotspot point. That is: for a note, the dragged bitmap hotspot should be the center of the notehead, so that the received mouse point is the proposed center of the notehead, and the returned point will be the valid position for the center of the notehead.
    
    2. OnDrag() method is only for dragging StaffObjs during edition, not for dragging a mouse tool image. OnDrag() method expects to receive to top-left corner of the \b{notehead} bitmap, not the top-left of an arbitray bitmap. It will return the nearest point to a line or half-line.
    
    
    
    
    
    






------------------------------------------------------------------------------------
Unicode char from code point

How can I create a Unicode character if I know its code point value? 

For example, using the wxWidgets Unicode build I've done tests (in MS WIndows) with Unicode chars U+20AC (Euro sign), U+41 ('A' letter) and U+10346 (GOTHIC LETTER FAIHU, decimal 66,374) . I've tried:

[code]
wxChar a = _T('\u41');      //compilation error: invalid escape char
wxChar b = _T('\u0041');    //compil. error: universal char cannot replace basic char
wxChar c = _T('\u20AC');    //seems to work
wxChar d = '\x20AC';        //compilation error: too big for char
wxChar e = '\u20AC';        //compiles but doesn't work             
wxChar f = _T('\x20AC');    //seems to work
wxChar g = _T('\u10346');   //compilation warning: truncated
[/code]


In summary, tests c & f seem to work but

1. method c is not valid for certain code points lower than U+FF, 
2. I'm not sure if they are platform independent and safe. Probably method f is not.
3. No success for code points higher than U+FFFF

any help?


