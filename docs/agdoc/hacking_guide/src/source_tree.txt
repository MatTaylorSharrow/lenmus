\include ../../agdoc/replacements

\title    {Program structure and source code organization}

\toc 

\h1 {Program structure and source code organization}


\h2 {Program structure}
The program can be broken into three main parts, each of it with several sub-parts:

a) Score representation subsystem:
 * Internal score representation. 
 * Score renderization
 * LDP parser
 * MusicXML parser
 
b) eBooks subsystem:
 * eBooks management and renderization
 * Exercises for ebooks
 
c) GUI and auxiliary:
 * Application management and GUI
 * Sound management
 * Other auxiliary parts 
 

\h3 {The score representation subsystem}

Externally, scores are represented as text, either in MusicXML or LDP format. In future, it would be possible to add support to import/export more formats, being MIDI the first candidate.

A file, in MusicXML or LDP, must be parsed and transformed into an internal representation, more suitable for processing. The score representation subsystems takes care of all this: parsing files, building and maintaining an internal model of the score, and exporting the internal model to one of the external supported formats.


\h3 {eBooks subsystem}

eBooks are a totally different type of information that the program must deal with. They are a collection of texts, scores, images and exercises, organized into chapters and themes. Again, there are two representations for an eBook: an external one, to be contained in a file, and an internal one, more suitable for processing.

The eBooks subsystem takes care of reading the external representation, rendering the eBooks and reacting to user input to make eBooks interactive (that is, moving through the book and controlling interaction with scores and exercises to make them 'live').

\h3 {The application subsystem and auxiliary classes}

The application materializes to the user as a main window with menus, toolbars, auxiliary windows, a main tabbed interface, etc. The renderization and control of all these windows is managed by the GUI subsystem.

Finally, although non related to the GUI and application management, for description purposes we will we include in this block some additional auxiliary classes, such as those to manage sound (MIDI, wave). 


\h2 {Source code organization}
Since project start, I've tried to have source code organized by subsystems (as previously described), subdividing each subsystem into parts, as necessary, for better comprehension and management. This objective is not yet totally achieved, as some times it is difficult to put clear lines between subsystems. Currently, source code is organized in these folders: 

\vbar_table[Table 1. Source code tree; anchor=TAB1; class=simpletable]
{
\th{ Folder  ||  Subfolder || Subsystem || Content }
\al{ <           <            <     }

    app        ||         || GUI   || Classes related with main GUI and the MVC model.
    ~_         ||toolbox  || GUI   || Classes related with score edition toolbox
    auxmusic   ||         || eBook || Auxiliary classes, mainly used in exercises: chords, intervals, etc.
    exercises  ||         || eBook || Code related with the implementation of exercises
    ~_         ||auxctrols ||eBook || Widgets to include in Ctrol classes
    ~_         ||dialogs  || eBook || Dialogs for exercise options.
    globals    ||         || GUI   || A few global classes: paths, colours
    graphic    ||         || score || All classes related to score renderization: the graphic engine
    html       ||         || eBook || Code related to rendering eBooks
    ldp_parser ||         || score || Code related to LDP parser
    mdi        ||         || GUI   || Classes for GUI: MDI model implemented as a tabbed window
    options    ||         || GUI   || Program global options
    score      ||         || score || Classes for internal score representation
    ~_         ||properties || GUI/score || classes for score edition: properties of each score object
    sound      ||         || GUI || classes related to sound: MIDI manager, VAW manager
    updater    ||         || GUI || classes to check for program updates, and related
    widgets    ||         || GUI || classes to implement GUI program widgets: buttons, caret, rules, etc.
    xml_parser ||         || score || parser for MusicXML files
}

\h2 {How to start learning the code?}

That will depend on your main purpose to study the code: to get a global general idea or to start hacking, as soon as possible, on a certain program area. Lets describe each one of these approaches.


\h3 {To study the code, in general}

Well, it is difficult to give guidelines here. But sure, start section on
\href0 [app_overview] {application overview} and from there explore other sections 
according to your main interests.

\h3 {To start hacking}

\h4 {GUI: score renderization & edition windows}

 * Read chapter on the \href0 [model_view_controller] {model-view-controller} architecture and how is it implemented in LenMus
 
 * Start with the MVC model, classes app/ScoreDoc, app/ScoreView, app/ScoreCanvas, app/ScoreController.

 * See other classes used to display scores in exercises: exercises/ScoreAuxCtrol.


\h4 {Internal score representation}


[To be continued ... ]






 
