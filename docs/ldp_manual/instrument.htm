<html>
<head>
<link rel="stylesheet" media="all" href="singledoc.css" type="text/css" />
</head>
<body>


<h2><a name="description_Instrument">The Instrument element</a></h2>
<a href="#TOC">TOC</a>

<p>An Instrument is a collection of elements, describing the music for that instrument.</p>

<p>
<a name="rule_instrument">&nbsp;</a>
<span class="nt">Instrument</span> :=
    (<span class="t">instrument</span>
    [<span class="nt">InstrName</span>]
    [<span class="nt">MIDI_Info</span>]
    [<span class="nt">Staves</span>]
    {<span class="nt">MusicData</span> |
     <span class="nt">Split</span> }
    <span class="t">)</span>
<br />
&nbsp;<span class="nt">Staves</span> :=
    (<span class="t">staves</span>
     <span class="nt">num</span>)
</p>

<p>Instruments can have a name
</p>

<p>The 'music' is described by just MusicData element or a Split element. What are they?
Any plain-text music representation has to describe music in sequence. But a music
score is not just a sequence of musical objects; the vertical organization of simultaneous
voices is equally important. So, when trying to describe music as a sequence of
elements we are confronted to a dilemma: To describe a polyphonic composition, should
each voice be described in sequence? or should it be described as a sequence of chords?
Should the horizontal
organization of musical parts be primary, or should the vertical organization of musical
measures? The answer is different for every music application.

But the representation language have to be flexible to allow for representing music both
ways, and be able to switch between them easily.</p>

<div class="comparison">
<p><b>Guido</b> and <b>LilyPond</b> offer two orthogonal constructors to allow for describing music
either horizontally, as a sequence of in time consecutive musical objects,
or vertically (in parallel), as a series of simultaneous - in time - musical objects.
The most simple form of parallelism
is a chord where the voices consist of single notes.</p>

<p>Sequence:<br />
- GUIDO: '[ ... ]'<br />
- LilyPond: '{ ... }'</p>

<p>Parallelism:<br />
- GUIDO: '{ ... }'<br />
- LilyPond: '&lt;&lt; ... &gt;&gt;'</p>

<p>Both constructors can be mixed and recursively used, giving a lot of flexibility to
the user to describe music in whatever way it is more suitable.</p>


<p><b>MusicXML</b> is less flexible. It offers both approaches (score-partwise DTD or
score_timewise DTD) but only for the whole score. The two approaches can not be
combined or applied recursively. This creates some problems and, from a user point of
view, is quite inflexible. To give some more flexibility and provide a solution to
allow certain parallelism in sequential descriptions,
two by-passes are provided:</p>

<ul>
    <li>An explicit chord constructor to describe chords.</li>
    <li>A non-declarative but procedural approach to allow
        parallelism inside a sequential description: tags 'backup' and 'forward' are
        used to reposition an 'internal time counter' and create parallel descriptions.
        This parallelism is only allowed inside a measure.</li>
</ul>
</div>



</body>
</html>
