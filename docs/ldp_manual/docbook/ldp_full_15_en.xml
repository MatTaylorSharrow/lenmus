<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/5.0b.5/docbook.dtd" [

<!ENTITY bkcgen SYSTEM "chap_m_general.xml">
<!ENTITY bkc11 SYSTEM "chap_1.xml">
<!ENTITY bkc12 SYSTEM "chap_2.xml">
<!ENTITY bkc13 SYSTEM "chap_3.xml">
<!ENTITY bkc14 SYSTEM "chap_4.xml">

]>

<book id="book">
<bookinfo>
<title>LDP Music representation language. Reference manual</title>
<para>Version 1.5. Revision: July, 2006</para>

<author>
<surname>LenMus project</surname>
</author>

<legalnotice id="legal_notice">

<title>Legal Notice</title>
<para>Permission is granted to copy, distribute, and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or any later
version published by the Free Software Foundation; with no Invariant Sections, 
no Front-Cover Texts, and no Back-Cover Texts. A copy of the license
is available at 
<ulink url="http://www.gnu.org/licenses/fdl.html">http://www.gnu.org/licenses/fdl.html</ulink>.
</para>

<para>This document may be copied and distributed in any medium, either
commercially or noncommercially, provided that the GNU Free Documentation
License (FDL), the copyright notices, and the license notice saying
the GNU FDL applies to the document are reproduced in all copies, 
and that you add no other conditions whatsoever to those of the GNU FDL. 
</para>

</legalnotice>

<copyright>
<year>2002-2006</year>
<holder>Cecilio Salmeron</holder>
</copyright>
</bookinfo>

<preface id="preface">
<title>Preface</title>

<para><acronym>LDP</acronym> language is an external representation, as text, of LenMus scores.
LenMus aim is not that the user has to enter scores by using the <acronym>LDP</acronym> language, but to
offer a full featured graphical interface to enter and edit the scores.
Therefore, users don't need to know anything about the <acronym>LDP</acronym> language.
Nevertheless, for users, <acronym>LDP</acronym> can be of help to prepare scores as text files to
be later processed and finished using the LenMus program. In fact, this is
the only possibility at current program version (3.1).</para>
</preface>

<chapter id="chIntro">
<title>Introduction</title>

<sect1 id="sIntro_lang">
<title>The LDP language</title>

<para>The LenMus <acronym>LDP</acronym> notation language is a general purpose formal language for representing
music scores in a platform independent, plain-text and human-readable way.
This language is named <acronym>LDP</acronym> because I started this project in Spanish and I named this
language after the
Spanish acronym for 'Lenguaje de Descripción de Partituras, that is 'Language
to Describe Scores'.</para>

<!--
<para>Why to define a new language instead of using a existing
one such as MIDI,  MusicXML, abc, Guido or others?</para>

<ul>
 <li>MIDI: oriented
     to playing back scores. It does not encode information to draw and render
     scores.</li>
 <li>MusicXML: MusicXML started as an interchange format. It might be adequate but it lacks
     of facilities for accurate positioning of the different musical objects (note: in
     version 1.1 MusicXML started to introduce better positioning information, but this
     was after the decision to start with <acronym>LDP</acronym> was taken).
     It is also too verbose to
     write scores by hand, and to be used as internal intermediate representation.</li>
 <li>Abc: It is an 'old' language designed when nearly everything was batch processed.
    Although it has a
    great base of users it didn't suit LenMus project needs.</li>
 <li>Guido: I didn't know about GUIDO when I started this project. Probably it would have been
    a good choice but I had a lot of <acronym>LDP</acronym> code written when I heard about GUIDO.</li>
 <li>Again, I did not consider any other existing language such as LilyPond or Mup,
    because I didn't know about them when I started this project.</li>
</ul>

<para>At the time the LenMus project started it was finally decide to design a new language because:
</para>

<ul>
 <li>I did not find any accepted standard. In fact the only "standard" available was be MusicXML.</li>
 <li>The need to code music scores by hand: In MusicXML this task is very tedious and
     takes a lot of time; at that time MusicXML was not a good option
     for specifying detailed positioning information.</li>

 <li>More important: designing my own language forced me to study more in depth
    the problems
    associated to the representation of music in all its aspects. This was
    more in line with the objectives of the project.</li>

 <li>Finally, using my own language would give me more freedom in case MusicXML or
    any other chosen language could
    not fully satisfy the LenMus project needs.</li>
</ul>

-->

<para><acronym>LDP</acronym> is a pragmatic
approach and its development has the direct benefit of forcing me to study in
depth the problems of representing music in textual form. Although the internal
language for LenMus project scores is <acronym>LDP</acronym>, the LenMus program will include
facilities to import and export music scores to other formats, such as MusicXML.</para>

</sect1>

<sect1 id="sIntro_example">
<title>A very simple introductory score</title>

<para>Let's see how a very simple score is encoded. The score will be just one measure, in G clef,
time signature will be C major (no accidentals) and time signature will be 4 by 4. The measure
will have a whole c note. Here is how it would look:</para>

<imageobject>
    <imagedata fileref="images/image001.jpg" format="JPG"/>
</imageobject>

<para>In <acronym>LDP</acronym> this score is described as follows:</para>

<informalexample><programlisting>
  (score
     (vers 1.5)
     (instrument
        (musicData
            (clef G)
            (key C)
            (time 4 4)
            (n c4 w)
            (barline)
        )
     )
  )

</programlisting></informalexample>



<para>Let's analyse this code. First note that in <acronym>LDP</acronym> all the information is structured
as <emphasis>elements</emphasis>. An <emphasis>element</emphasis> is a list of keywords and data values enclosed in parenthesis.
An element always starts with a keyword (i.e. vers) and it is followed by data items.
These data items can be just
simple data (single word values, such as '1.5' or 'G') or complex data: other elements --
those of you with an
information science background will note that this is a LISP like syntax  --</para>
<para>In the example, we can note that all the score is a list starting with the keyword 'score'.
The first data item of this element is also a list, '(vers 1.5)': it starts with the
keyword 'Vers' and has only a simple  data item, the number 1.5.</para>

<para>Blank space, indentation, tabs and line breaks have no meaning: they are just a visual help
for humans to improve readability, and you can use them at your desire or not use them
at all. For example, the previous score can be written in a single line as:</para>

<informalexample><programlisting>
(score (vers 1.5)(instrument (musicData ( ... ))
</programlisting></informalexample>

<para>Or in two lines, for example as:</para>

<informalexample><programlisting>
(score (vers 1.5)(instrument
(musicData ( ... ))
</programlisting></informalexample>

<para>The only rule is that you can not break keywords or simple data values. So you can not
write, for example,</para>
<informalexample><programlisting>
( s c o r e ( ...))
</programlisting></informalexample>

<para><acronym>LDP</acronym> language is case sensitive, so for example, &quot;score&quot;,
&quot;Score&quot; and &quot;SCORE&quot; will not be taken as the same token.</para>

<para>To reduce the work for typing a score or to improve legibility in some cases
 an <emphasis>abbreviated</emphasis> syntax is allowed.
This abbreviation consists on either:</para>

<itemizedlist>

<listitem>For elements with just one parameter, the syntax "(name param)"
can be also written as "name:param". For example,
the following element
    <informalexample><programlisting>
    (title right "Franz Schubert" (x 40mm)(y 30mm))
    </programlisting></informalexample>
can also be written as:
    <informalexample><programlisting>
    (title right "Franz Schubert" x:40mm y:30mm)
    </programlisting></informalexample>

</listitem>

<listitem>For elements with more than one parameter or often used, in certain
cases it is allowed
an abbreviated syntax, consisting, usually, in suppressing the parenthesis and
reducing the element to a string.

For example, in case of element <command>g</command>, beamed group,
writing <literal>(g +)</literal> is equivalent to writing just
<literal>g+</literal>, or
in case of element <command>t</command>, tuplet,
writing <literal>(t + 5 6)</literal> is equivalent to writing just
<literal>t5/6</literal>.
</listitem>

</itemizedlist>

</sect1>

<!-- ==================================================================== -->

<sect1 id="s1_comments">
<title>Comments</title>

<para>To improve human legibility and understanding it is allowed to include comments.
Two consecutive slash characters (//) will be interpreted as the start of a comment and
all text until the end of the line will be ignored. For example:</para>
<informalexample><programlisting>
// This is a score with comments
(score
    (vers 1.5)              // version 1.5 of <acronym>LDP</acronym> is used
    (instrument             // Start of music for the first voice
        (musicData          // start this voice
            (clef G)        // Clef: G on 2nd line
            (key C)         // Key signature: C major
            (time 4 4)      // Time signature: 4 4
            (n c4 w)        // Note. Pitch: C4, duration: w (whole note)
            (barline)       // a simple barline
        )
    )
)
</programlisting></informalexample>

</sect1>

<!-- ==================================================================== -->

<sect1 id="s1_language">
<title>Language</title>

<para><acronym>LDP</acronym> supports to use a customized set of tags for each language, so if, for example,
you would prefer to
encode the scores using tags in Spanish instead of tags in English, you would write:</para>
<informalexample><programlisting>
  (score                            //the score and language tags are the only non-translatable
     (language es ISO-8859-1)       //specifies to use the Spanish set of tags
     (vers 1.5)
     (instrumento
        (voz
            (clave Sol)         //note the keyword 'clave' instead of 'clef'
            (tonalidad Do)
            (metrica 4 4)
            (n c4 r)            // duration: r (redonda = whole note)
            (barra)
        )
     )
  )

</programlisting></informalexample>

</sect1>

<sect1 id="s1_notation">
<title>Notation used</title>

<para>To describe the language, Backus Naur like form (BNF) syntax rules will be used:</para>

<itemizedlist>

<listitem><para>Squared brackets are placed around optional elements.</para></listitem>

<listitem><para>Curly brackets are placed to enclose a list of alternatives. 
Elements within this list are considered exclusive
and are separated by vertical bars.</para></listitem>

<listitem><para>Repeatable arguments will be followed by an asterisk, meaning
'zero or more repetitions' or by a plus sign, mening 'one or more repetitions'.</para></listitem>

<listitem><para>A symbol in bold face like <command>this</command> one means a terminal symbol, that is, 
a string that must be written exactly as it appears here. Apart of using bold face, if 
this manual is printed or displayed using colours, dark blue colour will be used for
terminal symbols.</para></listitem>

<listitem><para>A symbol like <replaceable>this</replaceable> in italics means a non-terminal
symbol (a category name). It must be replaced by a specific element of that cathegory.
If colour is possible they will appear in green colour.</para></listitem>

</itemizedlist>


</sect1>

</chapter>


<!-- ========================================================================== -->
<!-- ========================================================================== -->


<chapter id="ch_details">
<title>Music description</title>



<sect1 id="s1_element_score">
<title>The Score, Language and Version elements</title>

<para>A Score is, basically, a collection of Instruments and some optional information such as the title or
the author.</para>

<productionset>
<production xml:id="ebnf.score">
    <lhs><replaceable>Score</replaceable></lhs>
    <rhs>
    <command>(score</command>
    <replaceable><nonterminal def="#ebnf.language">Language</nonterminal></replaceable>
    <replaceable><nonterminal def="#ebnf.version">Version</nonterminal></replaceable>
    [<replaceable><nonterminal def="#ebnf.title">Title</nonterminal></replaceable>]<superscript>*</superscript>
    <replaceable><nonterminal def="#ebnf.instrument">Instrument</nonterminal></replaceable><superscript>+</superscript>
    <command>)</command>
    </rhs>
</production>
</productionset>
    
<para>In case you would like to use a different set of tags than the English set or to use
non Western characters (ISO-8859-1) the <replaceable>Language</replaceable>
element allows to specify these
characteristics.</para>

<productionset>
<production xml:id="ebnf.language">
    <lhs><replaceable>Language</replaceable></lhs>
    <rhs>
    <command>(language</command>
    <replaceable><nonterminal def="#ebnf.languageCode">LanguageCode</nonterminal></replaceable>
    <replaceable><nonterminal def="#ebnf.charset">Charset</nonterminal></replaceable>
    <command>)</command>
    <sbr />
    </rhs>
</production>

<production xml:id="ebnf.charset">
    <lhs><replaceable>Charset</replaceable></lhs>
    <rhs>
    Any ISO charset code name, i.e. &quot;ISO-8859-1&quot;
    </rhs>
</production>

<production xml:id="ebnf.languageCode">
    <lhs><replaceable>LanguageCode</replaceable></lhs>
    <rhs>
    A language code from ISO 639 (perhaps extended with a country code from ISO 3166, as en-US)
    </rhs>
</production>
</productionset>

<para>Examples:</para>
<informalexample><programlisting>
(language es iso-8859-1)      <lineannotation>use the Spanish set of tags</lineannotation>
(language en iso-8859-1)      <lineannotation>use the English set of tags</lineannotation>
</programlisting></informalexample>


<para>The <replaceable>Version</replaceable> element is just a number to indicate the <acronym>LDP</acronym> language version used
to encode the score:</para>

<productionset>
<production xml:id="ebnf.version">
    <lhs><replaceable>Version</replaceable></lhs>
    <rhs>
    <command>(vers</command>
    <replaceable><nonterminal def="#ebnf.versNumber">VersNumber</nonterminal></replaceable>
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.versNumber">
    <lhs><replaceable>VersNumber</replaceable></lhs>
    <rhs>
    An string identifying the version, i.e. <literal>1.5</literal>
    </rhs>
</production>
</productionset>

<para>For example:</para>

<informalexample><programlisting>
(vers 1.5)      <lineannotation>the score is encoded using <acronym>LDP</acronym> version 1.5</lineannotation>
</programlisting></informalexample>

</sect1>

<!-- ======================================================================== -->

<sect1 id="s1_element_Instrument">
<title>The Instrument element</title>

<para>An Instrument is a collection of one or more
staves (i.e., grand-staff) describing the music.
</para>

<productionset>
<production xml:id="ebnf.instrument">
    <lhs><replaceable>Instrument</replaceable></lhs>
    <rhs>
    <command>(instrument</command>
    [<replaceable><nonterminal def="#ebnf.instrName">Name</nonterminal></replaceable>
    [<replaceable><nonterminal def="#ebnf.instrAbbrev">Abbreviation</nonterminal></replaceable>]]
    [<replaceable><nonterminal def="#ebnf.instrIndent">FirstSystemIndent</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.midiInfo">MIDI_Info</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.staves">Staves</nonterminal></replaceable>]
    <replaceable><nonterminal def="#ebnf.musicdata">MusicData</nonterminal></replaceable>
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.instrName">
    <lhs><replaceable>Name</replaceable></lhs>
    <rhs>
    <command>(name</command>
    <replaceable><nonterminal def="#ebnf.text">TextString</nonterminal></replaceable>
    [<replaceable><nonterminal def="#ebnf.font">Font</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.location">Location</nonterminal></replaceable>]
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.instrAbbrev">
    <lhs><replaceable>Abbreviation</replaceable></lhs>
    <rhs>
    <command>(abbrev</command>
    <replaceable><nonterminal def="#ebnf.text">TextString</nonterminal></replaceable>
    [<replaceable><nonterminal def="#ebnf.font">Font</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.location">Location</nonterminal></replaceable>]
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.instrIndent">
    <lhs><replaceable>FirstSystemIndent</replaceable></lhs>
    <rhs>
    x relative location
    </rhs>
</production>
</productionset>

<para>Instruments have usually a name. Optionally, also an abbreviated name; in these cases
the name will be used at the start of the first system, and the abbreviation for
succeeding systems.</para>

<para>The musical content is described by MusicData elements. Polyphony is possible, as
notes, rests and other elements can be assigned to different voices. Any voice can
move across all staves of the instrument.</para>

<para>Examples:
Two instruments, first one on single staff and second with two staves (grand-staff):
</para>

<informalexample><programlisting>
(instrument (name "Flute") (musicData ...))
(instrument (staves 2)(name "Piano") (musicData ...))
</programlisting></informalexample>


<para>By default, the instrument will use a 5-line staff. This can be
modified using the Staves element, which describes the type and layout of
the staves to use for the instrument:</para>

<productionset>
<production xml:id="ebnf.staves">
    <lhs><replaceable>Staves</replaceable></lhs>
    <rhs>
    <command>(staves</command>
    {<replaceable>num</replaceable> |
     <command>overlayered</command> }
    </rhs>
</production>
</productionset>

<para>For now the Staves element is just
the number of five lines staves to use. One is the default value if no 'Staves'
element is specified. For Grand-staff 2 must be coded. In
future versions additional options will be included to allow for a full description
of any type of desired staff layout.</para>

<para>Instead of a number the keyword <command>overlayered</command> can be used. This is useful
for those cases in which it is required than multiple instruments share the same staff.
Percussion parts or piano reduction scores are examples of these cases.
</para>

<warning>Command <command>overlayered</command> is not yet implemented:
</warning>

<!--
<para>This is represented in <acronym>LDP</acronym> by defining overlayered instruments for the
other instruments
sharing the staff. In these cases overlayered instruments must have the 'overlayered'
attribute, meaning that the are overlayered on the previously defined instrument. They
will heritage the Staves element from the instrument on which they are overlayered.</para>
-->

<para>If the instrument name is specified, the first system is automatically indented
to print it. If no name specified or
if you desire a different indentation space, it is possible to specify the desired
indentation by using an x displacement
element.
If relative units are specified (tenths) it will be always assumed than they refer
to first staff.</para>

<para>Examples:</para>

<informalexample><programlisting>
First system indentation: 20mm and name 'Flute' in this space:
    (instrument name="Flute" (dx 20mm)(musicData ...))

First system indentation: 20mm and no name
    (instrument (dx 20mm)(musicData ...))
</programlisting></informalexample>



<!-- Not yet


<para>It is also possible to include multiple MusicData elements in an instrument. In these
cases, each MusicData element is layered over all the other MusicData elements of the
instrument. These can be useful for describing many voices in a single instrument. The
only limitation of this approach is that music elements (notes, rests, etc.) in each
MusicData collection can not relate (ties, slurs, ...) to
elements in any other MusicData element.</para>


<para>Example:</para>

<informalexample><programlisting>

Three voices in one instrument with two staves:
  - Any voice can go across the two staves.
  - Implemented as three parts (musicData), second and third overlayered

    (instrument (staves 2)(voices 3)
                (name "Piano")
                (musicData ...)
                (musicData ...)
                (musicData ...)
    )

</programlisting></informalexample>

-->

</sect1>

<!-- ==================================================================================================== -->


<sect1 id="s1_element_MusicData">
<title>The MusicData element</title>

<para>The MusicData element is just a collection of different objects, mainly Notes
and Rests, but also other elements, such as Clefs or KeySignatures, are possible.</para>

<productionset>
<production xml:id="ebnf.musicdata">
    <lhs><replaceable>MusicData</replaceable></lhs>
    <rhs>
    { <replaceable><nonterminal def="#ebnf.note">Note</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.rest">Rest</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.chord">Chord</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.clef">Clef</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.key">KeySignature</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.time">TimeSignature</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.barline">Barline</nonterminal></replaceable> |
      <replaceable>Other</replaceable> }<superscript>*</superscript>
    </rhs>
</production>
</productionset>

<para>Examples:</para>

<informalexample><programlisting>
<lineannotation>Single note:</lineannotation>
    (musicData (n c4 q))

<lineannotation>C major scale:</lineannotation>
    (musicData (n c4 q)(n d4 q)(n e4 q)(n f4 q)(n g4 q)(n a4 q)(n b4 q)(n c5 q))

<lineannotation>Short fragment with a measure:</lineannotation>
    (musicData (clef treble)(key C)(time 2 4)(n c4 q)(n e4 q)(n g4 q)(n c5 q)(barline))

</programlisting></informalexample>

<!-- ==================================================================================================== -->

<sect2 id="s2__Clef">
<title>The Clef element</title>

<para>Setting or changing the clef is done with the clef element:</para>

<productionset>
<production xml:id="ebnf.clef">
    <lhs><replaceable>MusicData</replaceable></lhs>
    <rhs>
    <command>(clef</command>
    <replaceable>ClefName</replaceable>
    [<replaceable><nonterminal def="#ebnf.tessitura">Tessitura</nonterminal></replaceable>]
    [<command>noVisible</command>]
     <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.tessitura">
    <lhs><replaceable>Tessitura</replaceable></lhs>
    <rhs>
    { <command>+8va</command> |
      <command>-8va</command> |
      <command>+15ma</command> |
      <command>-15ma</command> }
    </rhs>
</production>
</productionset>

<para>The tessitura implied by a clef can be modified by including a tessitura option,
that will draw a 8va or 15ma symbol above (+8va, +15va) or below (-8va, -15ma) the clef,
and force the corresponding
octave shift. The tessitura option is only usable with G and F clefs.</para>
<warning>Tessitura option is not yet supported.</warning>


<para>Examples:</para>
<informalexample><programlisting>
(clef G)            <lineannotation>G clef</lineannotation>
(clef bass)         <lineannotation>F clef</lineannotation>
(clef treble +8va)  <lineannotation>G clef with 8va symbol above</lineannotation>
</programlisting></informalexample>


<para>Valid clef names are described in the following table:</para>

<informaltable>
<tgroup cols='2' align='left'>
<thead>
<row>
<entry>ClefName</entry>
<entry>Meaning</entry>
</row>
</thead>
<tbody>
<row>
<entry>treble, G, G2, violin</entry>
<entry>G clef on 2nd line</entry>
</row>
<row>
<entry>bass, F, F4</entry>
<entry>F clef on 4th line</entry>
</row>
<row>
<entry>baritone, F3</entry>
<entry>F clef on 3rd line</entry>
</row>
<row>
<entry>soprano, C1</entry>
<entry>C clef on 1st line</entry>
</row>
<row>
<entry>mezzosoprano, C2</entry>
<entry>C clef on 2nd line</entry>
</row>
<row>
<entry>alto, C3</entry>
<entry>C clef on 3rd line</entry>
</row>
<row>
<entry>tenor, C4</entry>
<entry>C clef on 4th line</entry>
</row>
<row>
<entry>percussion</entry>
<entry>Percussion clef</entry>
</row>
<!--
<row>
<entry>baritoneC, C5</entry>
<entry>C clef on fifth line</entry>
</row>
<row>
<entry>subbass, F5</entry>
<entry>F clef on fifth line</entry>
</row>
<row>
<entry>french, G1</entry>
<entry>G clef on first line</entry>
</row>
-->
</tbody>
</tgroup></informaltable>

</sect2>

<!-- ==================================================================================================== -->

<sect2 id="s2__Key">
<title>The Key element</title>

<para>Setting or changing the key signature is done with the key element:</para>

<productionset>
<production xml:id="ebnf.key">
    <lhs><replaceable>KeySignature</replaceable></lhs>
    <rhs>
    <command>(key</command>
    <replaceable>KeyName</replaceable>
    [<command>noVisible</command>]
     <command>)</command>
    </rhs>
</production>
</productionset>

<para>Examples:</para>
<informalexample><programlisting>
(key F+)           <lineannotation>F sharp major key</lineannotation>
(key f+)           <lineannotation>F sharp minor key</lineannotation>
(key d-)           <lineannotation>D flat minor key</lineannotation>
(key C)            <lineannotation>C major key</lineannotation>
</programlisting></informalexample>


<para>Valid values for tag KeyName are described in the following table:</para>

<informaltable>
<tgroup cols='4' align='left'>>
<thead>
    <row><entry>KeyName</entry><entry>Key signature</entry><entry>KeyName</entry><entry>Key signature</entry></row>
</thead>
<tbody>
    <row><entry>C</entry><entry>C major</entry>         <entry>a</entry><entry>A minor</entry></row>
    <row><entry>G</entry><entry>G major</entry>        <entry>e</entry><entry>E minor</entry></row>
    <row><entry>D</entry><entry>D major</entry>         <entry>b</entry><entry>B minor</entry></row>
    <row><entry>A</entry><entry>A major</entry>         <entry>f+</entry><entry>F sharp minor</entry></row>
    <row><entry>E</entry><entry>E major</entry>         <entry>c+</entry><entry>C sharp minor</entry></row>
    <row><entry>B</entry><entry>B major</entry>         <entry>g+</entry><entry>G sharp minor</entry></row>
    <row><entry>F+</entry><entry>F sharp major</entry>  <entry>d+</entry><entry>D sharp minor</entry></row>
    <row><entry>C+</entry><entry>C sharp major</entry>  <entry>a+</entry><entry>A sharp minor</entry></row>
    <row><entry>C-</entry><entry>C flat major</entry>   <entry>a-</entry><entry>A flat minor</entry></row>
    <row><entry>G-</entry><entry>G flat major</entry>  <entry>e-</entry><entry>E flat minor</entry></row>
    <row><entry>D-</entry><entry>D flat major</entry>   <entry>b-</entry><entry>B flat minor</entry></row>
    <row><entry>A-</entry><entry>A flat major</entry>   <entry>f-</entry><entry>F flat minor</entry></row>
    <row><entry>E-</entry><entry>E flat major</entry>   <entry>c-</entry><entry>C flat minor</entry></row>
    <row><entry>B-</entry><entry>B flat major</entry>   <entry>g-</entry><entry>G flat minor</entry></row>
    <row><entry>F</entry><entry>F major</entry>         <entry>d-</entry><entry>D flat minor</entry></row>
</tbody>
</tgroup></informaltable>

</sect2>

<!-- ==================================================================================================== -->

<sect2 id="s2__TimeSign">
<title>The Time Signature element</title>

<para>Setting or changing the time signature is done with the TimeSignature element:</para>

<productionset>
<production xml:id="ebnf.time">
    <lhs><replaceable>TimeSignature</replaceable></lhs>
    <rhs>
    <command>(time</command>
    <replaceable>TopNumber</replaceable>
    <replaceable>BottomNumber</replaceable>
    [<command>noVisible</command>]
     <command>)</command>
    </rhs>
</production>
</productionset>

<para>Examples:</para>
<informalexample><programlisting>
(time 2 4)
(time 3 8)
(time 5 8)
</programlisting></informalexample>

</sect2>

<!-- ==================================================================================================== -->

<sect2 id="s2__Barline">
<title>The Barline element</title>

<para>Element 'barline' is used to specify a barline at the end of a measure.
You can specify a barline to be 'invisible' (that is, it will not be rendered).
If the type of barline is not specified it is assumed to be
a normal barline (simple line).</para>

<productionset>
<production xml:id="ebnf.barline">
    <lhs><replaceable>Barline</replaceable></lhs>
    <rhs>
    <command>(barline</command>
    [<replaceable>BarlineType</replaceable>]
    [<command>noVisible</command>]
     <command>)</command>
    </rhs>
</production>

<production>
    <lhs><replaceable>BarlineType</replaceable></lhs>
    <rhs>
    { <command>simple</command> |
      <command>double</command> |
      <command>end</command> |
      <command>start</command> |
      <command>startRepetition</command> |
      <command>endRepetition</command> |
      <command>doubleRepetition</command> }
    </rhs>
</production>
</productionset>

<!--
<para>The <em>Barline_type</em> can be either a tag or a graphical sign (as in abc language):</para>
<para>
<span class="nt">Barline_type</command> :=
    { <command>|</command> |
      <command>||</command> |
      <command>|]</command> |
      <command>[|</command> |
      <command>:|</command> |
      <command>|:</command> |
      <command>::</command> }
</para>
-->

<para>Example:</para>
<informalexample><programlisting>
(n c4 e)(n e4 e)(barline end)
</programlisting></informalexample>

</sect2>
</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_element_Notes_Rests">
<title>Notes and rests</title>

<para>Rests can be considered as notes with no pitch, so in <acronym>LDP</acronym> notes and rests are instances
of a more general concept: <emphasis>noterests</emphasis>. A noterest is either a note or a rest.</para>

<para>The minimum information required to represent notes is its pitch and its duration.
For rests only its duration is needed.</para>

<productionset>
<production xml:id="ebnf.note">
    <lhs><replaceable>Note</replaceable></lhs>
    <rhs>
    <command>(n</command>
    <replaceable><nonterminal def="#ebnf.pitch">Pitch</nonterminal></replaceable>
    <replaceable><nonterminal def="#ebnf.duration">Duration</nonterminal></replaceable>
    [<replaceable>Other</replaceable>]
     <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.rest">
    <lhs><replaceable>Rest</replaceable></lhs>
    <rhs>
    <command>(r</command>
    <replaceable><nonterminal def="#ebnf.duration">Duration</nonterminal></replaceable>
    [<replaceable>Other</replaceable>]
     <command>)</command>
    </rhs>
</production>
</productionset>


<!-- ==================================================================================================== -->

<sect2 id="pitch">
<title>Pitch</title>

<para>The pitch is represented by combining the note name, the octave and the accidentals.</para>
<para>The <emphasis>note name</emphasis> is a letter that represents the diatonic step:</para>

<productionset>
<production xml:id="ebnf.pitch">
    <lhs><replaceable>Pitch</replaceable></lhs>
    <rhs>
    { <command>c</command> |
      <command>d</command> |
      <command>e</command> |
      <command>f</command> |
      <command>g</command> |
      <command>a</command> |
      <command>b</command> }
    </rhs>
</production>
</productionset>

<!--
There are different systems of notenames:
c d e f g a h/b (diatonic) 1.
c cis d dis e f fis g gis a ais h/b (chromatic) 2.
do re me fa sol la si/ti (solfege)
-->
<para>The <emphasis>octave</emphasis> is an integer number indicating the octave of the note, where octave 4
is the central one (a4 = 440Hz). All octaves start with note name c and ends in note name b, so note
c4 is the c note just below the a4 note. Octaves range is 0 to 9.</para>

<para>Accidentals are represented by combinations of the signs plus (+), minus (-),
equal (=) and the letter x (x). They represent, respectively, sharps, flats, naturals
and the double sharp symbol. So, for example,
++ represents two sharps, x a double sharp, and =- represents  a natural flat.</para>

<para>With all this, the pitch is just the combination of the previous signs. Examples:</para>

<informalexample><programlisting>
+c4     a sharp C4 note (C of octave 4, the central C)

--b3    a double flat B3 note (B of octave 3, the B immediately below C4)
</programlisting></informalexample>

<!--
<para>La alteración representa el número de semitonos (ej. -1 para bemol, +1 para
sostenido). Se pueden usar valores decimales (ej. +0,5 = un cuarto de tono
arriba) para microtonos.</para>
-->
<important>
Accidentals are relative to the context. That is, you have to write only those
accidentals that are not implied by
the key signature or that are not implied by a previous accidental in the same measure.
</important>

<para>
Then, in the following example:</para>
<informalexample><programlisting>
(key F)(n b4 q)(barline)
</programlisting></informalexample>

<para>the quarter b4 note will be a flat b4, as it is in F major key.</para>

<!--
<para>En aquellos
caso en que pudiera interesar especificar la altura absoluta, esto es, la que
debe tener con independencia del contexto, hay que indicarlo expresamente
mediante la marca ABS colocada inmediatamente tras el dato de altura.</para>
-->

<!--
<para>Si se quisiera
codificar toda la partitura con alturas absolutas (tal como se hace en
MusicXML), evitando asi tener que incluir el parámtro ABS en
cada nota, esta circunstancia hay que especificarla como un parámetro global
del elemento &lt;score&gt;</para>
-->

<!--
<para>It is also possible to specify pitch as a number, and this will be interpreted as the
absolute MIDI pitch. For example, 43 will be the central c note (c4).
This way of encoding pitch is discouraged as some musical information is lost.
This facility has been included to facilitate importing MIDI files and scores written by other
programs. <emphasis>Possibly this feature will removed from the language in future versions</emphasis>.</para>

-->

</sect2>

<!-- ==================================================================================================== -->

<sect2 id="duration">
<title>Duration</title>

<productionset>
<production xml:id="ebnf.duration">
    <lhs><replaceable>Duration</replaceable></lhs>
    <rhs>
    { <replaceable>number</replaceable> |
      <replaceable>letter</replaceable> }
    [ <replaceable>dots</replaceable> ]
    </rhs>
</production>
</productionset>

<para>There are two possibilities two designate durations:</para>
<orderedlist numeration="arabic">
<listitem>By numbers and dots: Durations are written as an apostrophe followed by
the reciprocal value of the duration. For example, a quarter note is written as
<literal>'4</literal>
(since it is a
1/4 note), while a 16th note is entered as <literal>'16</literal>
(since it is a 1/16 note).
The number is followed by dots in case the
note or rest is dotted. This method using numbers is language independent and
can be always mixed with next method.</listitem>
<listitem>By a letter and dots: Each note duration is designated by a character from following table, and is
followed by optional dots. This method is language dependent as a different set of characters
can be defined for each supported language.
</listitem>
</orderedlist>

<para>Designating notes by numbers is only allowed for notes shorter or equal than
a whole. For notes longer than
a whole you must use the letter notation.</para>


<para>Examples:</para>
<informalexample><programlisting>
'8..    <lineannotation>double dotted eighth note</lineannotation>
e..     <lineannotation>also double dotted eighth note</lineannotation>
'128    <lineannotation>128th note</lineannotation>
o       <lineannotation>also 128th note</lineannotation>
</programlisting></informalexample>


<para>Letters to designate durations are as follows:</para>
<informaltable><tgroup cols='2'>
  <thead>
    <row><entry>Duration</entry><entry>English US (English UK)</entry></row>
  </thead>
  <tbody>
    <row><entry>l</entry><entry><emphasis>l</emphasis>ong (longa)</entry></row>
    <row><entry>d</entry><entry><emphasis>d</emphasis>ouble whole (breve)</entry></row>
    <row><entry>w</entry><entry><emphasis>w</emphasis>hole (semibreve)</entry></row>
    <row><entry>h</entry><entry><emphasis>h</emphasis>alf (minim)</entry></row>
    <row><entry>q</entry><entry><emphasis>q</emphasis>uarter (crochet)</entry></row>
    <row><entry>e</entry><entry><emphasis>e</emphasis>ighth, 8th (quaver)</entry></row>
    <row><entry>s</entry><entry><emphasis>s</emphasis>ixteenth, 16th (semiquaver)</entry></row>
    <row><entry>t</entry><entry><emphasis>3</emphasis>2th (demisemiquaver)</entry></row>
    <row><entry>i</entry><entry>64th (hemidemisemiquaver)</entry></row>
    <row><entry>o</entry><entry><emphasis>1</emphasis>28th (semihemidemisemiquaver)</entry></row>
    <row><entry>f</entry><entry>2<emphasis>5</emphasis>6th (?)</entry></row>
  </tbody>
</tgroup></informaltable>

<!--
<informaltable><tgroup>
    <row><entry>Duration</entry><entry>English US (English UK)</entry></row>
    <row><entry>d</entry><entry><emphasis>d</emphasis>ouble whole, long (breve)</entry><entry>d - cua<emphasis>d</emphasis>rada</entry></row>
    <row><entry>w</entry><entry><emphasis>w</emphasis>hole (semibreve)</entry><entry>r</entry><entry><emphasis>r</emphasis>edonda</entry></row>
    <row><entry>h</entry><entry><emphasis>h</emphasis>alf (minim)</entry><entry>b</entry><entry><emphasis>b</emphasis>lanca</entry></row>
    <row><entry>q</entry><entry><emphasis>q</emphasis>uarter (crochet)</entry><entry>n</entry><entry><emphasis>n</emphasis>egra</entry></row>
    <row><entry>e</entry><entry><emphasis>e</emphasis>ighth, 8th (quaver)</entry><entry>c</entry><entry><emphasis>c</emphasis>orchea</entry></row>
    <row><entry>s</entry><entry><emphasis>s</emphasis>ixteenth, 16th (semiquaver)</entry><entry>s</entry><entry><emphasis>s</emphasis>emicorchea</entry></row>
    <row><entry>t</entry><entry><emphasis>3</emphasis>2th (demisemiquaver)</entry><entry>f</entry><entry><emphasis>f</emphasis>usa</entry></row>
    <row><entry>i</entry><entry><emphasis>6</emphasis>4th (hemidemisemiquaver)</entry><entry>m - se<emphasis>m</emphasis>ifusa</entry></row>
    <row><entry>o</entry><entry><emphasis>1</emphasis>28th (?)</entry><entry>g</entry><entry><emphasis>g</emphasis>arrapatea</entry></row>
    <row><entry>f</entry><entry>2<emphasis>5</emphasis>6th (?)</entry><entry>p - semigarra<emphasis>p</emphasis>atea</entry></row>
    </tgroup></informaltable>
-->

<para>For example: <literal>q.</literal> means a dotted quarter note and <literal>e..</literal> means
a double dotted eighth note</para>

</sect2>

<!-- ==================================================================================================== -->

<sect2 id="abbreviated_notation">
<title>Abbreviated notation for notes and rests</title>

<para>The abbreviated syntax is formed as follows:</para>
<orderedlist numeration="arabic">
<listitem>For pitch, the octave number can be omitted; if so, it is inherited from the preceding note.</listitem>
<listitem>Duration can be omitted; if so, it is inherited from the preceding note
or rest.</listitem>
<listitem>Eliminate parenthesis and spaces preceding pitch and duration. Separate
any other element using a comma (,).</listitem>
</orderedlist>

<para>Abbreviated and full notation can be mixed. Octave number and duration can only be
omitted in abbreviated notation, not inside a full notation element.</para>


<para>Example 1:</para>
<informalexample><programlisting>
<lineannotation>Full notation:</lineannotation>
    (n +c4 q)(n e4 q)(r e)(n g4 e)(n =c5 q)

<lineannotation>Abbreviated notation:</lineannotation>
    n+c4q  ne  re  ng  n=c5q
</programlisting></informalexample>

<para>Example 2:</para>
<informalexample><programlisting>
<lineannotation>Full notation:</lineannotation>
    (n +c4 e g+ t+)(n e4 e)(n f4 e g- t-)(r s)(n g4 s)(n =c5 e)
    (n +c4 '8 g+ t+)(n e4 '8)(n f4 '8 g- t-)(r '16)(n g4 '16)(n =c5 '8)

<lineannotation>Abbreviated notation:</lineannotation>
    n+c4e,g+,t+  ne  nf,g-,t-  rs  ng  n=c5e
    n+c4'8,g+,t+  ne  nf,g-,t-  r'16  ng  n=c5'8

<lineannotation>Mixed notation:</lineannotation>
    n+c4e,g+,t+  ne (n f4 e g- t-)  rs  ng (n =c5 e)
    n+c4'8,g+,t+  ne (n f4 '8 g- t-)  r'16  ng (n =c5 '8)
    n+c4e,g+,t+  ne (n f4 '8 g- t-)  r'16  ng (n =c5 e)
</programlisting></informalexample>

</sect2>


</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_element_Chord">
<title>Chords</title>

<para>A chord is just the list of notes that form the chord:</para>

<productionset>
<production xml:id="ebnf.chord">
    <lhs><replaceable>Chord</replaceable></lhs>
    <rhs>
    <command>(chord</command>
    <replaceable><nonterminal def="#ebnf.note">Note</nonterminal></replaceable><superscript>*</superscript>
     <command>)</command>
    </rhs>
</production>
</productionset>


<para>Example:</para>

<informalexample><programlisting>
(chord (n c4 q)(n e4 q)(n g4 q))    <lineannotation>C major chord</lineannotation>
(chord nc4q ne ng)                  <lineannotation>abbreviated</lineannotation>
</programlisting></informalexample>


<!--
<para>Polyphony can be seen as a generalization of chords, where instead of using a list
of notes they are replaced by a list of voices:</para>

<para>(chord &lt;voices&gt;*)</para>

<para>Formally, the 'chord' element requires a list of notes as argument, not a list
of voices. So we are going to introduce a new tag, the Split tag, equivalent to
the chord tag but whose argument is a list of voices:</para>

<para>(split &lt;voices&gt;*)</para>

<para>This improves legibility and, conceptually, both tags, chord and split, are
totally equivalent;</para>

<div class="comparison">
<para><emphasis>split</emphasis> constructor is equivalent to GUIDO segments '{ ... }' and to
LilyPond constructor '&lt;&lt; ... &gt;&gt;'
</para>
</div>

<para>Note that constructors (split &lt;voices&gt;) and (musicData &lt;music&gt;)
are orthogonal, that is,
they describe music either as series of temporally consecutive
musical objects, or as  a number of simultaneous musical objects.
Also note that mixed descriptions (i.e.: voices containing splits) and recursive
descriptions (i.e.: splits containing splits) are allowed.</para>

<para>Examples:</para>

<informalexample><programlisting>
Score with just a staff:
    (instrument (musicData &lt;music&gt;))

Score with two voices in single staff
    (instrument (split (musicData &lt;music&gt;)
                       (musicData &lt;music&gt;)))


Score with three voices in single instrument, but across two staves (i.e.: left hand,
right hand, third voice:
    (instrument (staves 2)
                (instrName "Piano")
                (split (musicData &lt;music&gt;)
                       (musicData &lt;music&gt;)
                       (musicData &lt;music&gt;))
    )

Score with two instruments, each one on its staff:
    (instrument (instrName "Flute") (musicData &lt;music&gt;))              //one staff
    (instrument (staves 2)(instrName "Piano") (musicData &lt;music&gt;))    //Two staves


</programlisting></informalexample>

-->

</sect1>

<!-- ==================================================================================================== -->

<!--
Single letter elements:

Group 1: Very common, only for notes and rests.

    sp  en
    ===========================================
    n   n   Note
    s   r   Rest

    t   t   Tupla / Tuplet
    l   l   Ligado / Tie
    g   g   Grupo / Beamed group
    a   -   Articulations
    x   -   Ligadura de expresion / Slur
    c   -   Caesura

Group 2: Very common, for notes, rests and clefs

    sp  en
    ===========================================
    p   p   Pentagrama / Staff
    -   -   Anotacion técnica


Group 3: Less used. Long tags can be used
    sp  en
    ===========================================
    -   -   Glissando
    d   -   Dinámica
    r   -   Arpegiato
    np  -   No arpegiado
    -   -   Deslizando
    o   -   Ornamento

    newSystem
    stem

-->


<!-- ==================================================================================================== -->

<sect1 id="s1_element_Tie">
<title>Ties</title>

<para>A character <command>l</command> (lower case letter L) indicates the start of a tie
that will end in the next coming note of the
same voice, staff and pitch than the one on which this notation is included.
No additional parameters are needed.</para>

<para>Example: A quarter C4 note tied to an eighth one:</para>
<informalexample><programlisting>
(n c4 q l)(n c4 e)
nc4q,l nc
</programlisting></informalexample>


<!--

<h4><a name="caesura_notation">Caesura</title>
<para>A character &quot;C&quot; indicates that the rest or note has a caesura. No additional parameters are
needed.

- Quizá un caracter detrás de la c para indicar el tipo de marca

Example:</para>
<code class="example">
(n c4 n c)
</code>

<para>Is a quarter C4 note with caesura.</para>

-->
</sect1>

<!-- ==================================================================================================== -->
<sect1 id="s1_element_Beamed_group">
<title>Beamed groups</title>

<para>When several consecutive notes have their stems beamed together this is coded by a notation
<command>g</command> (group).  The first parameter is a plus sign (+) or a minus sign (-) to mean, respectively,
that it is the start or the end of a group. After this sign other parameters are possible.
When the only parameters specified are the start/end sign, the
<command>g</command> element admits an abbreviated syntax <command>g+</command> in
the starting note and <command>g-</command> in the ending one.
Example:</para>

<informalexample><programlisting>
(n c4 q g+)(n d4 e)(n e4 e g-)
nc4q,g+ nde ne,g-
</programlisting></informalexample>

<para>A group of beamed notes, formed by a quarter C4 note, an eighth D4 note and an eighth E4 note.</para>


</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_element_Tuplet">
<title>Tuplets</title>

<para>A tuplet is a group of notes whose duration is modified; normally a graphic element
(a tuplet bracket and/or a number) marks this group of notes. The notes in a tuplet are
usually beamed together but this is not always the case.</para>

<para>In <acronym>LDP</acronym>, to specify the notes that form a tuplet, a notation 
<command>t</command> (tuplet) must be included
in the first and the last notes of the tuplet.</para>

<productionset>
<production xml:id="ebnf.tuplet">
    <lhs><replaceable>Tuplet</replaceable></lhs>
    <rhs>
    <command>(t</command>
    { <command>-</command> |
    <command>+</command>
    <replaceable>ActualNotes</replaceable>
    [ <replaceable>NormalNotes</replaceable> ] 
    [ <replaceable><nonterminal def="#ebnf.tupletOptions">TupletOptions</nonterminal>
            </replaceable><superscript>*</superscript> ] }
     <command>)</command>
    </rhs>
</production>
</productionset>


<para>The first parameter is a plus sign (+) or a minus sign (-) to signal, respectively,
that it is the start or the end of a tuplet. After the plus sign there must be a number
to indicate the tuplet type.</para>

<para>The <replaceable>ActualNotes</replaceable> element describes
    how many notes are played in the time usually occupied
    by the number of <replaceable>NormalNotes</replaceable>.
    If there are different types of notes in the tuplet (e.g. eighth and 16th
    notes) then <replaceable>ActualNotes</replaceable> and 
    <replaceable>NumNotes</replaceable> must always refer to the shortest
    note type (e.g. 16th notes).</para>

<para>Default values for <replaceable>NormalNotes</replaceable>:</para>
<itemizedlist>
    <listitem>triplet: three notes in time allotted for two:   (t + 3) --> (t + 3 2)</listitem>
    <listitem>duplet: two notes in time allotted for three:    (t + 2) --> (t + 2 3)</listitem>
    <listitem>4-tuplet: four notes in time allotted for 6:     (t + 4) --> (t + 4 6)</listitem>
    <listitem>5-tuplet: five notes in time allotted for 6:     (t + 5) --> (t + 5 6)</listitem>
</itemizedlist>

<para>In all other cases <replaceable>NormalNotes</replaceable> must be specified.</para>
<para>Examples:</para>


<informalexample><programlisting>
(n c4 e (t + 3)) (n d4 e) (n e4 e (t -))
nc4e,(t + 3) nd ne,(t -)
</programlisting></informalexample>

<para>This example is a triplet of eighth notes, that is, the three notes must be played
in the time normally allotted for two eight notes.</para>

<para>Additional parameters would be introduced in future to deal with renderization options.</para>

<para>As tuplets are very frequent, to simplify the writing, the tuplet element allows
abbreviated syntax: </para>

<informalexample><programlisting>
(t -)       <lineannotation>can be abbreviated as</lineannotation>  t-
(t + x)     <lineannotation>can be abbreviated as</lineannotation>  tx
(t + n m)   <lineannotation>can be abbreviated as</lineannotation>  t+n,m
</programlisting></informalexample>

<para>So, the previous example can be written as:</para>

<informalexample><programlisting>
(n c4 e t3)(n d4 e)(n e4 e t-)
nc4e,t3 nd ne,t-
</programlisting></informalexample>


<para>Element <command>t</command> does not implies beaming. Therefore elements 
<command>t</command> and <command>g</command>
must be combined as needed. Examples:</para>

<informalexample><programlisting>
(n c4 e g+) (n d4 s t3) (n c4 s) (n b3 s t- g-)
nc4e,g+  nds,t3  nc  nb3,t-,g-
</programlisting></informalexample>

<informalexample><programlisting>
(n c4 s g+ t3) (n d4 s) (n e3 s t-) (n f4 s t3) (n g4 s) (n a4 s t- g-)
nc4s,g+,t3  nd  ne3,t-  nf4,t3  ng  na4,t-,g-
</programlisting></informalexample>

<para>In addition to timing information some options are possible:</para>

<productionset>
<production xml:id="ebnf.tupletOptions">
    <lhs><replaceable>TupletOptions</replaceable></lhs>
    <rhs>
    { <replaceable><nonterminal def="#ebnf.tupletNumber">TupletNumber</nonterminal></replaceable> |
      <replaceable><nonterminal def="#ebnf.tupletBracket">TupletBracket</nonterminal></replaceable>
    }
    </rhs>
</production>

<production xml:id="ebnf.tupletNumber">
    <lhs><replaceable>TupletNumber</replaceable></lhs>
    <rhs>
    { <command>numActual</command> |
      <command>numBoth</command> |
      <command>numNone</command> }
    </rhs>
</production>

<production xml:id="ebnf.tupletBracket">
    <lhs><replaceable>TupletBracket</replaceable></lhs>
    <rhs>
    { <command>squaredBracket</command> |
      <command>curvedBracket</command> |
      <command>noBracket</command> }
    </rhs>
</production>

</productionset>

<para>
The <replaceable>TupletNumber</replaceable> option is used to display either
the number of actual notes (option <command>numActual</command>), the number
of both actual and normal notes (option <command>numBoth</command>), or 
neither (option <command>numNone</command>).
By default, it is <command>numActual</command>.
</para>

<para>
The <replaceable>TupletBracket</replaceable> option is used to display a
bracket. It can be a squared bracket (option <command>squaredBracket</command>),
a curved bracket (option <command>curvedBracket</command>), 
or nothing (option <command>noBracket</command>).
If unspecified, the default value is <command>squaredBracket</command>.
</para>

<para>The <replaceable>TupletNumber</replaceable> and <replaceable>TupletBracket</replaceable>
options will be inherited by following tuplets until new options are set.</para>

</sect1>

<!-- ==================================================================================================== -->
<sect1 id="s1_element_staff_number">
<title>Selecting the staff</title>

<para>When an instrument has several staves (e.g. the upper and lower staves in a grand-staff)
it is necessary a mechanism to specify in which staff a note, rest, clef, or other must
be placed. For this purpose, an element <command>p</command> is used.</para>

<productionset>
<production xml:id="ebnf.staffNumber">
    <lhs><replaceable>StaffNumber</replaceable></lhs>
    <rhs>
    <command>(p</command>
    <replaceable>num</replaceable>
     <command>)</command>
    </rhs>
</production>
</productionset>


<para>It can be abbreviated by omitting the parenthesis and joining
the <command>p</command> and the number. Example:
</para>
<informalexample><programlisting>
'(p 2)' is equivalent to 'p2'
</programlisting></informalexample>

<para>Staffs are numbered from top to bottom, starting at staff 1. The staff number
is inherited
by all coming elements until a new <command>p</command> notation is found.</para>


<para>Example: a scale across two staves:</para>
<informalexample><programlisting>
(instrument (staves 2)
    (musicData
        (clef G p1)(clef F p2)(key C)
        ng3w,p2 na nb nc4 nd,p1 ne nf ng
        (barline double)
    )
)
</programlisting></informalexample>

<para>Clef G is placed in first staff (p1) and clef F in second staff (p2). The
key is common to all staves of one instrument so no staff is specified. First note
(G3) is placed on second staff and consecutive notes inherits this, until
note D4 for which location on first staff is specified (p1). Remaining notes
inherits this.</para>

</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_polyphony">
<title>Polyphony</title>

<para>To represent several voices in staff there must be a way to move to the start of
a measure to enter a second voice. The <command>goBack</command> and 
<command>goFwd</command> elements are intended to
this, by allowing to move the internal time counter to the desired point so that
more notes/rests, layered over existing ones, can be entered.</para>

<productionset>
<production xml:id="ebnf.goBack">
    <lhs><replaceable>goBack</replaceable></lhs>
    <rhs>
    <command>(goBack</command>
    { <command>start</command> |
    <replaceable>Expression</replaceable> |
    [<replaceable>duration</replaceable>] }
     <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.goFwd">
    <lhs><replaceable>goFwd</replaceable></lhs>
    <rhs>
    <command>(goBack</command>
    { <command>end</command> |
    <replaceable>Expression</replaceable> |
    [<replaceable>duration</replaceable>] }
     <command>)</command>
    </rhs>
</production>
</productionset>


<para>were <replaceable>duration</replaceable> is the number of 256th notes to move forward or backwards
(one quarter note equals 64 256th notes),
and <replaceable>expression</replaceable> is an algebraic expression, formed by numbers, note duration letters
and the plus and minus signs, to indicate the duration to move forward or backwards.
Examples of expressions are:</para>

<informalexample><programlisting>
3q+e  -> Three quarter notes plus one eighth note;
         it is equivalent to a duration of 3x64+32 = 224,
         that is, 224 notes of 256th type.
q     -> A quarter note.
q+e   -> A quarter note plus an eight note, that is,
         a quarter dotted note.
</programlisting></informalexample>

<para>Constants <command>start</command> and <command>end</command> indicates to move
to the start or the end of current measure, respectively.</para>

<important><command>goBack</command> and <command>goFwd</command> can only be used 
to move inside a measure.
</important>

<para>Note that a <command>goFwd</command> element behaves like an invisible rest.</para>

<para>For example, following score is generated by next code:</para>

<imageobject>
    <imagedata fileref="images/goback_1.jpg" format="JPG"/>
</imageobject>

<informalexample><programlisting>
(score
   (vers 1.5)(language en iso-8859-1)
   (instrument
      (musicData
        (clef bass)
        (key e)
        (time 4 4)
        (n g3 q)
        (n a3 q)
        (n g3 q)
        (n e3 q)
        //go back to a3 note to add a second voice
        (goBack 128)
        (n e4 e. (stem up))
        (n d4 s)
        (barline)
      )
   )
)
</programlisting></informalexample>


</sect1>

</chapter>

<!-- ==================================================================================================== -->
<!-- ==================================================================================================== -->
<!-- ==================================================================================================== -->

<chapter id="ch_format_control">
<title>Elements to control format</title>

<sect1 id="s1_newSystem">
<title>newSystem</title>

<para>Forces to start a new system after current measure.</para>

<productionset>
<production xml:id="ebnf.newSystem">
    <lhs><replaceable>newSystem</replaceable></lhs>
    <rhs>
    <command>(newSystem)</command>
    </rhs>
</production>
</productionset>


<para>Example:</para>

<informalexample><programlisting>
(newSystem)
</programlisting></informalexample>

</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_stem">
<title>stem</title>

<para>Normally stem direction and size is automatically computed by the program,
according to usual engraving rules. Nevertheless, the stem of a note can
be fully specified by using the Stem element. It forces stem direction.</para>

<productionset>
<production xml:id="ebnf.stem">
    <lhs><replaceable>Stem</replaceable></lhs>
    <rhs>
    <command>(stem</command>
    { <command>up</command> |
    <command>down</command> }
    <command>)</command>
    </rhs>
</production>
</productionset>


<para>Example:</para>

<informalexample><programlisting>
(n e4 q (stem down))
(n e4 q stem:down)
</programlisting></informalexample>

</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_element_location">
<title>The Location element</title>

<para>The location element is used to specify the coordinates of the point at which
an object must be rendered.</para>

<productionset>
<production xml:id="ebnf.location">
    <lhs><replaceable>Location</replaceable></lhs>
    <rhs>
    [ { <command>(x</command>
    <replaceable>coordinate</replaceable>
    <command>)</command> |
    <command>(dx</command>
    <replaceable>displacement</replaceable>
    <command>)</command> } ]
    <sbr />
    [ { <command>(y</command>
    <replaceable>coordinate</replaceable>
    <command>)</command> |
    <command>(dy</command>
    <replaceable>displacement</replaceable>
    <command>)</command> } ]
    </rhs>
</production>
</productionset>

<para>Tag <command>x</command> refers to the horizontal direction
and tag <command>y</command> to the vertical one. For example:</para>

<informalexample><programlisting>
(x 40mm)(y 30mm)
</programlisting></informalexample>

<para>means that the vertical location must be 30 millimetres
from the top of the page and the horizontal location must be 40 millimetres
from the left edge of the page.</para>

<para>The origin of the page (point x=0, y=0) is always at the top left corner
of the page, more exactly the intersection point of left and top page margin lines.</para>

<para>The x coordinate increments always to right and y coordinate to bottom.
Coordinates can always be negative.</para>

<para>Sometimes it is useful to specify a location not in absolute coordinates but
relative to another object position. For example, to put a text above a specific
note or a barline.</para>

<para>In these cases tags <command>dx</command> and <command>dy</command>
should be used instead of <command>x</command> and <command>y</command>, respectively,
where the 'd' means 'displacement'. The displacement is computed normally from parent
object position, from its anchor point. This point is normally the lower left corner
of its bounding rectangle, that is, the smallest rectangle that will completely enclose
the object. In case of notes, the anchor point is the lower left corner of the
rectangle enclosing the notehead.</para>


<!-- ==================================================================================================== -->

<sect2 id="s2_element_units">
<title>Units</title>

<para>Two type of units:</para>

<variablelist>

<varlistentry>
<term>relative: tenths.</term>
<listitem><para>one tenth of staff interline space. These units are relative, as a score
can have staves of different sizes. So 'tenths' units can only be used to
specify location points for objects referred to a staff.</para></listitem>
</varlistentry>

<varlistentry>
<term>absolute: millimetres, inches, centimetres.</term>
<listitem><para>When no relative units are possible (for example, to specify
page size or page
margins) absolute units must be used.</para></listitem>
</varlistentry>

</variablelist>

<para>The unit name is always mandatory for absolute units:</para>

<itemizedlist>
<listitem>mm - millimetres</listitem>
<listitem>cm - centimetres</listitem>
<listitem>in - inches</listitem>
</itemizedlist>

<para>if no unit name is specified it will be considered as tenths.</para>

</sect2>

</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_element_font">
<title>The Font element</title>

<productionset>
<production xml:id="ebnf.font">
    <lhs><replaceable>Font</replaceable></lhs>
    <rhs>
    <command>(font</command>
    [<replaceable>FontName</replaceable>]
    [<replaceable>FontSize</replaceable>]
    [<replaceable><nonterminal def="#ebnf.fontStyle">FontStyle</nonterminal></replaceable>]
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.fontStyle">
    <lhs><replaceable>FontStyle</replaceable></lhs>
    <rhs>
    { <command>normal</command> |
    <command>bold</command> |
    <command>italic</command> |
    <command>italic-bold</command> }
    </rhs>
</production>
</productionset>



<para>Examples:</para>

<informalexample><programlisting>
(font bold 14pt)
(font "Arial" 12pt)
(font 10pt)
(fond italic)
</programlisting></informalexample>


</sect1>

<!-- ==================================================================================================== -->

<sect1 id="s1_element_title">
<title>The Title element</title>

<productionset>
<production xml:id="ebnf.title">
    <lhs><replaceable>Title</replaceable></lhs>
    <rhs>
    <command>(title</command>
    <replaceable><nonterminal def="#ebnf.alignment">Alignment</nonterminal></replaceable>
    <replaceable>TextString</replaceable>
    [<replaceable><nonterminal def="#ebnf.font">Font</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.location">Location</nonterminal></replaceable>]
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.alignment">
    <lhs><replaceable>Alignment</replaceable></lhs>
    <rhs>
    { <command>left</command> |
    <command>center</command> |
    <command>right</command> }
    </rhs>
</production>
</productionset>



<para>Examples:</para>

<informalexample><programlisting>
(title center &quot;Ave Maria (Ellen's Gesang III), D. 839&quot; (font bold 14pt))
(title left &quot;Words by Walter Scott&quot; (font italic 12pt))
(title right &quot;Franz Schubert&quot;)
(title left &quot;Translation by F.Green&quot;)
</programlisting></informalexample>

<para><command>center</command> alignment forces to center the string in current
line, without taking into
account the space consumed by any possible existing left title. That is,
<command>center</command> always
means 'centered in the line'.</para>

<!-- Not yet
<para>The strings can have markup tags (/b /i /font ...) to allow for typographical
changes (colour, size, etc.) in certain words and letters of the string.</para>
-->

<para>The font settings are stored as new default settings for
coming <command>title</command> elements.</para>

<para>The title text string will be printed at current location; therefore, the
location tag is not normally required. A new line is
forced only if not enough space in current line for the text-string.</para>

<para>If a location is specified, the text will be positioned so that the lower
edge of the
text is located at the specified y location. And alignment
takes place relative to the given x location. For example:</para>

<informalexample><programlisting>
(title right &quot;Franz Schubert&quot; x:40mm y:30mm)
</programlisting></informalexample>

<para>The y location given is 30mm. Since this is an absolute location
the lower edge of the text will be at 30 millimetres
from the top margin of the page. As the x location given is 40mm and, again, this is an
absolute location, the current horizontal position will be 40 millimetres
from the left edge of the page. Since right justification is indicated,
the string &quot;Franz Schubert&quot; will be placed such that the right edge of the
final &quot;t&quot; will be 40 millimetres from the left margin of the page.
If &quot;center&quot; had been specified, the middle of the string &quot;Franz Schubert&quot; would
be at 40 millimetres from the left margin of the page.</para>

<para>If a relative location is specified (dx or dy) they will refer always to
current location. It, normally, will be the right bottom corner of rectangle
bounding the previous title.</para>

<para>As titles are not positioned on staves, relative location units (tenths) are
not possible as no staff is involved. You must always use absolute units, such as
inches or millimetres.</para>

</sect1>

<!-- =============================================================== -->

<sect1 id="s1_element_text">
<title>The Text element</title>

<para>Elements of type <command>text</command> are used for placing arbitrary
strings of text on the score.
They must not be
used to place neither the lyrics under the notes nor the score titles as for both
of them there are specific elements.</para>

<productionset>
<production xml:id="ebnf.text">
    <lhs><replaceable>Text</replaceable></lhs>
    <rhs>
    <command>(text</command>
    <replaceable>TextString</replaceable>
    [<replaceable><nonterminal def="#ebnf.location">Location</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.font">Font</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.alignment">Alignment</nonterminal></replaceable>]
    [<replaceable><nonterminal def="#ebnf.origin">Origin</nonterminal></replaceable>]
    [<command>hasWidth</command>]
    <command>)</command>
    </rhs>
</production>

<production xml:id="ebnf.origin">
    <lhs><replaceable>Origin</replaceable></lhs>
    <rhs>
    { <command>bottom</command> |
    <command>top</command> }
    </rhs>
</production>
</productionset>


<para>Examples:</para>

<informalexample><programlisting>
(text &quot;Angelus dicit:&quot; (dx -5)(dy 60))
(text &quot;Allegro&quot; dy:-30)
(text &quot;A&quot; dy:0 hasWidth)
(text &quot;Right&quot; dy:40 right (font normal 24))
(text &quot;Example 1&quot; dx:center dy:20 center)
</programlisting></informalexample>


<para>Parameter <replaceable>Origin</replaceable> specifies the line
used as reference in the
<replaceable>Location</replaceable> parameter: either the top line of 
the text or its bottom line.
By default, location parameter refers to the bottom line of the text.</para>

<para>Parameter <replaceable>Alignment</replaceable> refers to how the
text will be positioned, relative to
the specified location point and origin:</para>
<itemizedlist>
<listitem>left - text will be placed such that the right edge of the
last character will be at the specified point. Depending on the specified or
implied default origin, it will be the right top corner if
origin is 'top', or the right bottom corner if origin is 'bottom'.</listitem>
<listitem>right - text will be placed such that the left edge of the
first character and the origin line will be at the specified point.</listitem>
<listitem>center - text will be placed such that the middle of the string
will be at the specified point.</listitem>
</itemizedlist>

<para><replaceable>Location</replaceable> should be normally
relative to the parent's anchor point. But in case
of <command>text</command> elements defined in a measure,
they are relative to current x position and
fifth line of staff.</para>


<para>The font settings are stored as new default settings for
coming <command>text</command> elements</para>

<!-- MusicXML: directions are StaffObjs associated to a measure
        A direction is a musical indication that is not attached
        to a specific note. Two or more may be combined to
        indicate starts and stops of wedges, dashes, etc. -->


<para>By default, <command>text</command> elements do not influence the
note spacing. To take text width into account, parameter <command>hasWidth</command> must be
included.</para>

<para>The location admits an special keyword, <command>dx:center</command>,
which means 'center of
current measure'.
This moves the current x location to the center of the space occupied by
current measure. Using
this keyword in conjunction with alignment <command>center</command>
simplifies placing texts
centered in a measure.</para>

</sect1>


</chapter>


<!-- =============================================================== -->
<!-- ======================    The end     ========================= -->
<!-- =============================================================== -->





</book>

