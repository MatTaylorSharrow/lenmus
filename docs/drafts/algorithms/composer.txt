/*

Composer 5 algorithm 2.

Algorithm 2 generates scores with mis-aligments and irregular measures.
The problem is due to lack of information about alignment. So in this
improved algorith we will also use patterns containing musical phrases
instead of full measures.
These patterns will be called 'fragments'. Fragments are divided into
'segments' (a segment is a group of elements - notes and rests - that must
go together and occupies one or more full beats).
Fragments will contain baline alignment information.

    Fragments & segments
    --------------------

    Score composition is based on rhythmic patterns called 'fragments'.

    A fragment is formed by concatenating notes and rests elements, for example:
    "(n * c)(n * c)(n * n)(n * c)(n * n)(n * s g+)(n * s)(n * c g-)"

    The elements are separated by commas (,) to form 'segments' (a segment is
    a group of elements that must go together and accupies one or more full
    beats), i.e:
    "(n * c),(n * c)(n * n)(n * c),(n * n),(n * s g+)(n * s)(n * c g-)"

    In certain cases, it is necesary to specify that a barline must be in a 
    specific point. This will be specified by putting a bar (|) instead of a
    comma (,), i.e.:
    "(n * c),(n * c)(n * n)(n * c)|(n * n),(n * s g+)(n * s)(n * c g-)"

    Fragments must always start aligned to beat. Therefore it is necessary
    to include any requied rest at the begining. Previous example must be
    finally written as:
    "(s c)(n * c),(n * c)(n * n)(n * c)|(n * n),(n * s g+)(n * s)(n * c g-)"

    Rests at the begining must occupy less than a beat. That is, no empty beats
    are allowed at the begining.

----------------------------------------------------------------------------------------

Fragments will be divided into 'segments'. Each segment division point (comma) is a place
in which a barline can be inserted:


    =====,=============,============,===============,=======
    
    

In some cases the pattern represented by the fragment requires a certain barline
alignment. Let's define: 

    tam - Time to align to barline ('am' stands for 'align to measure')
    
    <------------- tam ------------->               
    =====,=============,============|===============,=======
    
If a fragment does not require any special alignment for a barline then tam=0
    
    
    
A fragment can start in any place, not necessarily aligned to beat. Therefore
there will be a required time to align to beat:

    tab - Time to align to beat ('ab' stands for 'align to beat')

    <--tab--><------------- tam ------------->   
    |        =====,=============,============|===============,=======
    
    
If the fragment starts aligned to beat then tab=0
In theory, a fragment will never start with rests, as starting with a rest is equivalent 
to not being beat aligned.
Important: in practice, the way of indicate that the fragment is not beat aligned is by
starting the segment with rests. These rests will be removed by the program and its 
duration will be assigned to time tab.



Algorithm to fill

Let's assume that we have a measure M partially filled. Let's call:

    tm - the duration of a measure
    tb - the duration of a beat (problem: in irregular time signatures, such as 7/8, beat
            duration is not constant. But we can consider the appropriate tb at each time (?))
    tc - the time already 'consumed' in that measure,
    tcb - the consumed time of last beat (tcb = tc % tb)
    tr - the remaining time (tr = tm - tc)


           <----------------- tm ---------------->  
         ||<----------- tc ----------><----tr---->||         || = barline
xxxxxxxxx||xxxxxxxxx|xxxxxxxxx|xxxxxxx..|.........||           
         ||                    <-tcb->            ||         |  = beat line
           <--tb--->|<--tb--->|<--tb--->|<--tb--->


The problem now is, how to use a fragment F to fill the measure M?


Case 1. Fragment F does not require measure alignment (tam = 0).

Get the first segment S and compute its duration ts:


                              |.......xx|xxxxxxxxx|           
                               <-tab-><----ts---->             

Then segment S will fit in measure only when
   
        tr >= ts and tcb <= tab


If it fits, then the procedure will be:

    1. Add rest R(tab-tcb).
    2. Add segment S
    3. Update remaining time:  tr = tr - ts - (tab - tcb)

Important: Before adding a rest (step 1) we need to check if the previous element is
a tied-to-next note. If it is, we must remove the tie or replace the rest by a note.
If we always add a note of the same pitch than the previous one we save the trouble
of having to do the check and removing the tie!. It is only necessary to get the
pitch of the previous note. If notes instantiation is done after creating the
measure, we will also save this.

So, taking all this into consideration we will add a note instead of a rest. The
simplified modified algorithm will be:

    1. Add note N(tab-tcb).
    2. Add segment S
    3. Update remaining time:  tr = tr - ts - (tab - tcb)



Case 2.  Fragment requires measure alignment (tam > 0)

Not yet implemented


*/