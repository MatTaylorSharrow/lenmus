//--------------------------------------------------------------------------------------
//    LenMus Phonascus: The teacher of music
//    Copyright (c) 2002-2007 Cecilio Salmeron
//
//    This program is free software; you can redistribute it and/or modify it under the 
//    terms of the GNU General Public License as published by the Free Software Foundation;
//    either version 2 of the License, or (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful, but WITHOUT ANY 
//    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
//    PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License along with this 
//    program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, 
//    Fifth Floor, Boston, MA  02110-1301, USA.
//
//    For any comment, suggestion or feature request, please contact the manager of 
//    the project at cecilios@users.sourceforge.net
//
//-------------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "Metronome.h"
#endif

// For compilers that support precompilation, includes "wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#include "Metronome.h"

//access to lmMidiManager
#include "../sound/MidiManager.h"


    //
    // lmMetronomeTimer implementation
    //

void lmMetronomeTimer::Notify()
{
    m_pOwner->OnTimerEvent();
}

    //
    // lmMetronome implementation
    //

lmMetronome::lmMetronome(long nMM)
{
    m_pTimer = (lmMetronomeTimer*)NULL;
    SetMM(nMM);
    m_fEnabled = true;
    m_fRunning = false;
}

lmMetronome::~lmMetronome()
{
    if (m_pTimer) delete m_pTimer;
}

void lmMetronome::Start()
{
    if (!m_pTimer) {
        //create the timer
        m_pTimer = new lmMetronomeTimer(this);
    }
    m_pTimer->Start(m_nInterval);
    m_fRunning = true;

}

void lmMetronome::Stop()
{
    if (m_pTimer) {
        m_pTimer->Stop();
    }
    m_fRunning = false;

}

void lmMetronome::SetMM(long nMM)
{
    m_nInterval = (60000 / nMM);
    m_nMM = nMM;
}

void lmMetronome::SetInterval(long milliseconds)
{
    m_nInterval = milliseconds;
    m_nMM = (long)((60000.0 / (float)milliseconds)+ 0.5);;
}

void lmMetronome::OnTimerEvent()
{
    //! @todo metronome LED

    //If metronome active and not playing, generate metronome click. If currently playing
    //the metronome clicks will be generated by lmSoundManager.Play() as part of the MIDI events
    //table processing.
    if (m_fEnabled) {
        m_pTimer->Start(m_nInterval);
        //Me.picMtrLEDOff.Visible = False
        //Me.picMtrLEDRojoOn.Visible = True
        
        // generate metronome click
        if (g_pMidiOut) {
            g_pMidiOut->NoteOn(g_pMidi->MtrChannel(), g_pMidi->MtrTone1(), 127);
            ::wxMilliSleep(100);        //wait for 100 ms
            g_pMidiOut->NoteOff(g_pMidi->MtrChannel(), g_pMidi->MtrTone1(), 127);
        }
        // flash metronome LED
        //Me.picMtrLEDOff.Visible = True
        //Me.picMtrLEDRojoOn.Visible = False
    }
}
